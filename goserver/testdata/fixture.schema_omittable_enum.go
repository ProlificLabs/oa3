// Code generated by oa3 (https://github.com/aarondl/oa3). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.
package oa3gen

import (
	"fmt"
	"strings"

	"github.com/aarondl/oa3/support"
	"github.com/aarondl/opt/omit"
)

type OmittableEnum struct {
	EnumRef      omit.Val[EnumRef] `json:"enum_ref,omitempty"`
	EnumRefArray []EnumRef         `json:"enum_ref_array,omitempty"`
}

// validateSchema validates the object and returns
// errors that can be returned to the user.
func (o OmittableEnum) validateSchema() support.Errors {
	var ctx []string
	var ers []error
	var errs support.Errors
	_, _, _ = ctx, ers, errs

	for i, o := range o.EnumRefArray {
		_ = o
		ctx = append(ctx, fmt.Sprintf("[%d]", i))
		if newErrs := Validate(o); newErrs != nil {
			errs = support.AddErrsFlatten(errs, strings.Join(ctx, "."), newErrs)
		}
		ctx = ctx[:len(ctx)-1]
	}
	if len(ers) != 0 {
		ctx = append(ctx, "enum_ref_array")
		errs = support.AddErrs(errs, strings.Join(ctx, "."), ers...)
		ctx = ctx[:len(ctx)-1]
	}
	if val, ok := o.EnumRef.Get(); ok {
		if newErrs := Validate(val); newErrs != nil {
			ctx = append(ctx, "enum_ref")
			errs = support.AddErrsFlatten(errs, strings.Join(ctx, "."), newErrs)
			ctx = ctx[:len(ctx)-1]
		}
	}

	return errs
}
