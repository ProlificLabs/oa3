// Code generated by oa3 (https://github.com/aarondl/oa3). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.
package oa3gen

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/aarondl/chrono"
	"github.com/aarondl/json"
	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// Authenticate post /auth
func (_c Client) Authenticate(ctx context.Context, baseURL BaseURLBuilder) (AuthenticateResponse, *http.Response, error) {
	_urlStr := strings.TrimSuffix(baseURL.ToURL(), "/") + `/auth`
	_req, _err := http.NewRequestWithContext(ctx, http.MethodPost, _urlStr, nil)
	if _err != nil {
		return nil, nil, _err
	}
	var _query url.Values
	if len(_query) > 0 {
		_req.URL.RawQuery = _query.Encode()
	}

	_httpResp, _err := _c.doRequest(ctx, _req)
	if _err != nil {
		return nil, nil, _err
	}

	var _resp AuthenticateResponse
	switch _httpResp.StatusCode {
	case 200:
		_resp = HTTPStatusOk{}
	default:
		return nil, nil, fmt.Errorf("unknown response code")
	}

	return _resp, _httpResp, nil
}

// TestArrayRequest get /test/array/request
func (_c Client) TestArrayRequest(ctx context.Context, baseURL BaseURLBuilder, body TestArrayRequestInline) (TestArrayRequestResponse, *http.Response, error) {
	_urlStr := strings.TrimSuffix(baseURL.ToURL(), "/") + `/test/array/request`
	_req, _err := http.NewRequestWithContext(ctx, http.MethodGet, _urlStr, nil)
	if _err != nil {
		return nil, nil, _err
	}
	_bodyBytes, _err := json.Marshal(body)
	if _err != nil {
		return nil, nil, _err
	}
	_req.Body = io.NopCloser(bytes.NewReader(_bodyBytes))
	var _query url.Values
	if len(_query) > 0 {
		_req.URL.RawQuery = _query.Encode()
	}

	_httpResp, _err := _c.doRequest(ctx, _req)
	if _err != nil {
		return nil, nil, _err
	}

	var _resp TestArrayRequestResponse
	switch _httpResp.StatusCode {
	case 200:
		_resp = HTTPStatusOk{}
	default:
		return nil, nil, fmt.Errorf("unknown response code")
	}

	return _resp, _httpResp, nil
}

// TestEnumQueryRequest get /test/enum/query/request
func (_c Client) TestEnumQueryRequest(ctx context.Context, baseURL BaseURLBuilder, body TestEnumQueryRequestInline, sort TestEnumQueryRequestGetSortParam) (TestEnumQueryRequestResponse, *http.Response, error) {
	_urlStr := strings.TrimSuffix(baseURL.ToURL(), "/") + `/test/enum/query/request`
	_req, _err := http.NewRequestWithContext(ctx, http.MethodGet, _urlStr, nil)
	if _err != nil {
		return nil, nil, _err
	}
	_bodyBytes, _err := json.Marshal(body)
	if _err != nil {
		return nil, nil, _err
	}
	_req.Body = io.NopCloser(bytes.NewReader(_bodyBytes))
	var _query url.Values
	if _query == nil {
		_query = make(url.Values)
	}
	_query.Add(`sort`, fmt.Sprintf("%v", sort))
	if len(_query) > 0 {
		_req.URL.RawQuery = _query.Encode()
	}

	_httpResp, _err := _c.doRequest(ctx, _req)
	if _err != nil {
		return nil, nil, _err
	}

	var _resp TestEnumQueryRequestResponse
	switch _httpResp.StatusCode {
	case 200:
		_resp = HTTPStatusOk{}
	default:
		return nil, nil, fmt.Errorf("unknown response code")
	}

	return _resp, _httpResp, nil
}

// TestInlinePrimitiveBody get /test/inline
func (_c Client) TestInlinePrimitiveBody(ctx context.Context, baseURL BaseURLBuilder, body string) (TestInlinePrimitiveBodyResponse, *http.Response, error) {
	_urlStr := strings.TrimSuffix(baseURL.ToURL(), "/") + `/test/inline`
	_req, _err := http.NewRequestWithContext(ctx, http.MethodGet, _urlStr, nil)
	if _err != nil {
		return nil, nil, _err
	}
	_bodyBytes, _err := json.Marshal(body)
	if _err != nil {
		return nil, nil, _err
	}
	_req.Body = io.NopCloser(bytes.NewReader(_bodyBytes))
	var _query url.Values
	if len(_query) > 0 {
		_req.URL.RawQuery = _query.Encode()
	}

	_httpResp, _err := _c.doRequest(ctx, _req)
	if _err != nil {
		return nil, nil, _err
	}

	var _resp TestInlinePrimitiveBodyResponse
	switch _httpResp.StatusCode {
	case 200:
		_resp = HTTPStatusOk{}
	default:
		return nil, nil, fmt.Errorf("unknown response code")
	}

	return _resp, _httpResp, nil
}

// TestInline post /test/inline
func (_c Client) TestInline(ctx context.Context, baseURL BaseURLBuilder, body TestInlineInline) (TestInlineResponse, *http.Response, error) {
	_urlStr := strings.TrimSuffix(baseURL.ToURL(), "/") + `/test/inline`
	_req, _err := http.NewRequestWithContext(ctx, http.MethodPost, _urlStr, nil)
	if _err != nil {
		return nil, nil, _err
	}
	_bodyBytes, _err := json.Marshal(body)
	if _err != nil {
		return nil, nil, _err
	}
	_req.Body = io.NopCloser(bytes.NewReader(_bodyBytes))
	var _query url.Values
	if len(_query) > 0 {
		_req.URL.RawQuery = _query.Encode()
	}

	_httpResp, _err := _c.doRequest(ctx, _req)
	if _err != nil {
		return nil, nil, _err
	}

	var _resp TestInlineResponse
	switch _httpResp.StatusCode {
	case 200:
		var _respObject TestInline200Inline
		_b, _err := io.ReadAll(_httpResp.Body)
		if _err != nil {
			return nil, nil, _err
		}
		if _err = json.Unmarshal(_b, &_respObject); _err != nil {
			return nil, nil, _err
		}
		_resp = _respObject
	case 201:
		var _respObject TestInline201Inline
		_b, _err := io.ReadAll(_httpResp.Body)
		if _err != nil {
			return nil, nil, _err
		}
		if _err = json.Unmarshal(_b, &_respObject); _err != nil {
			return nil, nil, _err
		}
		_resp = _respObject
	default:
		return nil, nil, fmt.Errorf("unknown response code")
	}

	return _resp, _httpResp, nil
}

// TestServerPathOverrideRequest get /test/servers
func (_c Client) TestServerPathOverrideRequest(ctx context.Context, baseURL BaseURLBuilderTestservers) (TestServerPathOverrideRequestResponse, *http.Response, error) {
	_urlStr := strings.TrimSuffix(baseURL.ToURL(), "/") + `/test/servers`
	_req, _err := http.NewRequestWithContext(ctx, http.MethodGet, _urlStr, nil)
	if _err != nil {
		return nil, nil, _err
	}
	var _query url.Values
	if len(_query) > 0 {
		_req.URL.RawQuery = _query.Encode()
	}

	_httpResp, _err := _c.doRequest(ctx, _req)
	if _err != nil {
		return nil, nil, _err
	}

	var _resp TestServerPathOverrideRequestResponse
	switch _httpResp.StatusCode {
	case 200:
		_resp = HTTPStatusOk{}
	default:
		return nil, nil, fmt.Errorf("unknown response code")
	}

	return _resp, _httpResp, nil
}

// TestServerOpOverrideRequest post /test/servers
func (_c Client) TestServerOpOverrideRequest(ctx context.Context, baseURL BaseURLBuilderTestserversPost) (TestServerOpOverrideRequestResponse, *http.Response, error) {
	_urlStr := strings.TrimSuffix(baseURL.ToURL(), "/") + `/test/servers`
	_req, _err := http.NewRequestWithContext(ctx, http.MethodPost, _urlStr, nil)
	if _err != nil {
		return nil, nil, _err
	}
	var _query url.Values
	if len(_query) > 0 {
		_req.URL.RawQuery = _query.Encode()
	}

	_httpResp, _err := _c.doRequest(ctx, _req)
	if _err != nil {
		return nil, nil, _err
	}

	var _resp TestServerOpOverrideRequestResponse
	switch _httpResp.StatusCode {
	case 200:
		_resp = HTTPStatusOk{}
	default:
		return nil, nil, fmt.Errorf("unknown response code")
	}

	return _resp, _httpResp, nil
}

// TestTypeOverrides get /test/type_overrides
func (_c Client) TestTypeOverrides(ctx context.Context, baseURL BaseURLBuilder, body *Primitives, number decimal.Decimal, date chrono.Date, numberNull null.Val[decimal.Decimal], dateNull null.Val[chrono.Date], numberNonReq omit.Val[decimal.Decimal], dateNonReq omit.Val[chrono.Date]) (TestTypeOverridesResponse, *http.Response, error) {
	_urlStr := strings.TrimSuffix(baseURL.ToURL(), "/") + `/test/type_overrides`
	_req, _err := http.NewRequestWithContext(ctx, http.MethodGet, _urlStr, nil)
	if _err != nil {
		return nil, nil, _err
	}
	_bodyBytes, _err := json.Marshal(body)
	if _err != nil {
		return nil, nil, _err
	}
	_req.Body = io.NopCloser(bytes.NewReader(_bodyBytes))
	var _query url.Values
	if _query == nil {
		_query = make(url.Values)
	}
	_query.Add(`number`, fmt.Sprintf("%v", number))
	_query.Add(`date`, fmt.Sprintf("%v", date))
	if _val, _ok := numberNull.Get(); _ok {
		_query.Add(`number_null`, fmt.Sprintf("%v", _val))
	}
	if _val, _ok := dateNull.Get(); _ok {
		_query.Add(`date_null`, fmt.Sprintf("%v", _val))
	}
	if _val, _ok := numberNonReq.Get(); _ok {
		_query.Add(`number_non_req`, fmt.Sprintf("%v", _val))
	}
	if _val, _ok := dateNonReq.Get(); _ok {
		_query.Add(`date_non_req`, fmt.Sprintf("%v", _val))
	}
	if len(_query) > 0 {
		_req.URL.RawQuery = _query.Encode()
	}

	_httpResp, _err := _c.doRequest(ctx, _req)
	if _err != nil {
		return nil, nil, _err
	}

	var _resp TestTypeOverridesResponse
	switch _httpResp.StatusCode {
	case 200:
		_resp = HTTPStatusOk{}
	default:
		return nil, nil, fmt.Errorf("unknown response code")
	}

	return _resp, _httpResp, nil
}

// TestUnknownBodyType post /test/unknown/body/type
func (_c Client) TestUnknownBodyType(ctx context.Context, baseURL BaseURLBuilder, body io.ReadCloser) (TestUnknownBodyTypeResponse, *http.Response, error) {
	_urlStr := strings.TrimSuffix(baseURL.ToURL(), "/") + `/test/unknown/body/type`
	_req, _err := http.NewRequestWithContext(ctx, http.MethodPost, _urlStr, nil)
	if _err != nil {
		return nil, nil, _err
	}
	_req.Body = body
	var _query url.Values
	if len(_query) > 0 {
		_req.URL.RawQuery = _query.Encode()
	}

	_httpResp, _err := _c.doRequest(ctx, _req)
	if _err != nil {
		return nil, nil, _err
	}

	var _resp TestUnknownBodyTypeResponse
	switch _httpResp.StatusCode {
	case 200:
		_resp = HTTPStatusOk{}
	default:
		return nil, nil, fmt.Errorf("unknown response code")
	}

	return _resp, _httpResp, nil
}

// GetUser get /users/{id}
//
// Retrieves a user with a long description that spans multiple lines so
// that we can see that both wrapping and long-line support is not
// bleeding over the sacred 80 char limit.
func (_c Client) GetUser(ctx context.Context, baseURL BaseURLBuilder, id string, validStr omitnull.Val[GetUserGetValidStrParam], reqValidStr null.Val[GetUserGetReqValidStrParam], validInt omit.Val[int], reqValidInt int, validNum omit.Val[float64], reqValidNum float64, validBool omit.Val[bool], reqValidBool bool, reqStrFormat uuid.UUID, dateTime chrono.DateTime, date chrono.Date, timeVal chrono.Time, durationVal time.Duration, arrayPrimExplode omit.Val[GetUserGetArrayPrimExplodeParam], arrayPrimFlat GetUserGetArrayPrimFlatParam, arrayPrimIntExplode omit.Val[GetUserGetArrayPrimIntExplodeParam], arrayPrimIntFlat GetUserGetArrayPrimIntFlatParam, arrayEnumExplode omit.Val[GetUserGetArrayEnumExplodeParam], arrayEnumFlat GetUserGetArrayEnumFlatParam) (GetUserResponse, *http.Response, error) {
	_urlStr := strings.TrimSuffix(baseURL.ToURL(), "/") + `/users/{id}`
	_urlStr = strings.Replace(_urlStr, `{id}`, fmt.Sprintf("%v", id), 1)
	_req, _err := http.NewRequestWithContext(ctx, http.MethodGet, _urlStr, nil)
	if _err != nil {
		return nil, nil, _err
	}
	if _val, _ok := validStr.Get(); _ok {
		_req.Header.Add(`valid_str`, fmt.Sprintf("%v", _val))
	}
	var _query url.Values
	if _query == nil {
		_query = make(url.Values)
	}
	if _val, _ok := reqValidStr.Get(); _ok {
		_query.Add(`req_valid_str`, fmt.Sprintf("%v", _val))
	}
	if _val, _ok := validInt.Get(); _ok {
		_query.Add(`valid_int`, fmt.Sprintf("%v", _val))
	}
	_query.Add(`req_valid_int`, fmt.Sprintf("%v", reqValidInt))
	if _val, _ok := validNum.Get(); _ok {
		_query.Add(`valid_num`, fmt.Sprintf("%v", _val))
	}
	_query.Add(`req_valid_num`, fmt.Sprintf("%v", reqValidNum))
	if _val, _ok := validBool.Get(); _ok {
		_query.Add(`valid_bool`, fmt.Sprintf("%v", _val))
	}
	_query.Add(`req_valid_bool`, fmt.Sprintf("%v", reqValidBool))
	_query.Add(`req_str_format`, fmt.Sprintf("%v", reqStrFormat))
	_query.Add(`date_time`, fmt.Sprintf("%v", dateTime))
	_query.Add(`date`, fmt.Sprintf("%v", date))
	_query.Add(`time_val`, fmt.Sprintf("%v", timeVal))
	_query.Add(`duration_val`, fmt.Sprintf("%v", durationVal))
	if _val, _ok := arrayPrimExplode.Get(); _ok {
		for _, _v := range _val {
			_query.Add(`array_prim_explode`, fmt.Sprintf("%v", _v))
		}
	}
	var _arrayPrimFlatSlice []string
	for _, _v := range arrayPrimFlat {
		_arrayPrimFlatSlice = append(_arrayPrimFlatSlice, fmt.Sprintf("%v", _v))
	}
	_query.Set(`array_prim_flat`, strings.Join(_arrayPrimFlatSlice, ","))
	if _val, _ok := arrayPrimIntExplode.Get(); _ok {
		for _, _v := range _val {
			_query.Add(`array_prim_int_explode`, fmt.Sprintf("%v", _v))
		}
	}
	var _arrayPrimIntFlatSlice []string
	for _, _v := range arrayPrimIntFlat {
		_arrayPrimIntFlatSlice = append(_arrayPrimIntFlatSlice, fmt.Sprintf("%v", _v))
	}
	_query.Set(`array_prim_int_flat`, strings.Join(_arrayPrimIntFlatSlice, ","))
	if _val, _ok := arrayEnumExplode.Get(); _ok {
		for _, _v := range _val {
			_query.Add(`array_enum_explode`, fmt.Sprintf("%v", _v))
		}
	}
	var _arrayEnumFlatSlice []string
	for _, _v := range arrayEnumFlat {
		_arrayEnumFlatSlice = append(_arrayEnumFlatSlice, fmt.Sprintf("%v", _v))
	}
	_query.Set(`array_enum_flat`, strings.Join(_arrayEnumFlatSlice, ","))
	if len(_query) > 0 {
		_req.URL.RawQuery = _query.Encode()
	}

	_httpResp, _err := _c.doRequest(ctx, _req)
	if _err != nil {
		return nil, nil, _err
	}

	var _resp GetUserResponse
	switch _httpResp.StatusCode {
	case 304:
		_resp = HTTPStatusNotModified{}
	default:
		return nil, nil, fmt.Errorf("unknown response code")
	}

	return _resp, _httpResp, nil
}

// SetUser post /users/{id}
//
// Sets a user
func (_c Client) SetUser(ctx context.Context, baseURL BaseURLBuilder, body *Primitives) (SetUserResponse, *http.Response, error) {
	_urlStr := strings.TrimSuffix(baseURL.ToURL(), "/") + `/users/{id}`
	_req, _err := http.NewRequestWithContext(ctx, http.MethodPost, _urlStr, nil)
	if _err != nil {
		return nil, nil, _err
	}
	_bodyBytes, _err := json.Marshal(body)
	if _err != nil {
		return nil, nil, _err
	}
	_req.Body = io.NopCloser(bytes.NewReader(_bodyBytes))
	var _query url.Values
	if len(_query) > 0 {
		_req.URL.RawQuery = _query.Encode()
	}

	_httpResp, _err := _c.doRequest(ctx, _req)
	if _err != nil {
		return nil, nil, _err
	}

	var _resp SetUserResponse
	switch _httpResp.StatusCode {
	case 200:
		var _respObject SetUser200WrappedResponse
		_b, _err := io.ReadAll(_httpResp.Body)
		if _err != nil {
			return nil, nil, _err
		}
		if _err = json.Unmarshal(_b, &_respObject.Body); _err != nil {
			return nil, nil, _err
		}
		if hdr := _httpResp.Header.Get(`X-Response-Header`); len(hdr) != 0 {
			_respObject.HeaderXResponseHeader.Set(hdr)
		}
		_resp = _respObject
	default:
		var _respObject SetUserdefaultWrappedResponse
		_b, _err := io.ReadAll(_httpResp.Body)
		if _err != nil {
			return nil, nil, _err
		}
		if _err = json.Unmarshal(_b, &_respObject.Body); _err != nil {
			return nil, nil, _err
		}
		_resp = _respObject
	}

	return _resp, _httpResp, nil
}
