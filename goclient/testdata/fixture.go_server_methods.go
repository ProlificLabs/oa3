// Code generated by oa3 (https://github.com/aarondl/oa3). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.
package oa3gen

import (
	"errors"
	"io"
	"net/http"
	"strings"
	"time"

	"github.com/aarondl/chrono"
	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
)

// Authenticate post /auth
func (c GoServer) Authenticate(ctx context.Context) (AuthenticateResponse, *http.Response, error) {
	urlStr := `/auth`
	req := http.NewRequest(http.MethodPost, urlStr, nil)
	var queryStringValues url.Values

	if len(queryStringValues) > 0 {
		req.URL.RawQuery = queryStringValues.Encode()
	}

	httpResp, err := c.doRequest(req)
	if err != nil {
		return nil, nil, err
	}

	var resp AuthenticateResponse
	switch httpResp.Status {
	case 200:

	default:
		return nil, nil, errors.Errorf("unknown response code")
	}

	return resp, httpResp, nil
}

// Testinlineprimitivebody get /test/inline
func (c GoServer) Testinlineprimitivebody(ctx context.Context, body string) (TestInlinePrimitiveBodyResponse, *http.Response, error) {
	urlStr := `/test/inline`
	req := http.NewRequest(http.MethodGet, urlStr, nil)
	bodyBytes, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	req.Body = bytes.NewReader(bodyBytes)
	var queryStringValues url.Values

	if len(queryStringValues) > 0 {
		req.URL.RawQuery = queryStringValues.Encode()
	}

	httpResp, err := c.doRequest(req)
	if err != nil {
		return nil, nil, err
	}

	var resp TestInlinePrimitiveBodyResponse
	switch httpResp.Status {
	case 200:

	default:
		return nil, nil, errors.Errorf("unknown response code")
	}

	return resp, httpResp, nil
}

// Testinline post /test/inline
func (c GoServer) Testinline(ctx context.Context, body TestInlineInline) (TestInlineResponse, *http.Response, error) {
	urlStr := `/test/inline`
	req := http.NewRequest(http.MethodPost, urlStr, nil)
	bodyBytes, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	req.Body = bytes.NewReader(bodyBytes)
	var queryStringValues url.Values

	if len(queryStringValues) > 0 {
		req.URL.RawQuery = queryStringValues.Encode()
	}

	httpResp, err := c.doRequest(req)
	if err != nil {
		return nil, nil, err
	}

	var resp TestInlineResponse
	switch httpResp.Status {
	case 200:

	case 201:

	default:
		return nil, nil, errors.Errorf("unknown response code")
	}

	return resp, httpResp, nil
}

// Getuser get /users/{id}
//
// Retrieves a user with a long description that spans multiple lines so
// that we can see that both wrapping and long-line support is not
// bleeding over the sacred 80 char limit.
func (c GoServer) Getuser(ctx context.Context, id string, validStr omitnull.Val[string], reqValidStr null.Val[string], validInt omit.Val[int], reqValidInt int, validNum omit.Val[float64], reqValidNum float64, validBool omit.Val[bool], reqValidBool bool, reqStrFormat string, dateTime chrono.DateTime, date chrono.Date, timeVal chrono.Time, durationVal time.Duration) (GetUserResponse, *http.Response, error) {
	urlStr := `/users/{id}`
	urlStr = strings.Replace(urlStr, `{id}`, fmt.Sprintf("%v", id), 1)
	req := http.NewRequest(http.MethodGet, urlStr, nil)
	if val, ok := validStr.Get(); ok {
		req.Header().Set(`valid_str`, fmt.Sprintf("%v", val))
	}
	var queryStringValues url.Values
	if queryStringValues == nil {
		queryStringValues = make(url.Values)
	}
	if val, ok := reqValidStr.Get(); ok {
		req.queryStringValues.Set(`req_valid_str`, fmt.Sprintf("%v", val))
	}
	if val, ok := validInt.Get(); ok {
		req.queryStringValues.Set(`valid_int`, fmt.Sprintf("%v", val))
	}
	req.queryStringValues.Set(`req_valid_int`, fmt.Sprintf("%v", reqValidInt))
	if val, ok := validNum.Get(); ok {
		req.queryStringValues.Set(`valid_num`, fmt.Sprintf("%v", val))
	}
	req.queryStringValues.Set(`req_valid_num`, fmt.Sprintf("%v", reqValidNum))
	if val, ok := validBool.Get(); ok {
		req.queryStringValues.Set(`valid_bool`, fmt.Sprintf("%v", val))
	}
	req.queryStringValues.Set(`req_valid_bool`, fmt.Sprintf("%v", reqValidBool))
	req.queryStringValues.Set(`req_str_format`, fmt.Sprintf("%v", reqStrFormat))
	req.queryStringValues.Set(`date_time`, fmt.Sprintf("%v", dateTime))
	req.queryStringValues.Set(`date`, fmt.Sprintf("%v", date))
	req.queryStringValues.Set(`time_val`, fmt.Sprintf("%v", timeVal))
	req.queryStringValues.Set(`duration_val`, fmt.Sprintf("%v", durationVal))
	if len(queryStringValues) > 0 {
		req.URL.RawQuery = queryStringValues.Encode()
	}

	httpResp, err := c.doRequest(req)
	if err != nil {
		return nil, nil, err
	}

	var resp GetUserResponse
	switch httpResp.Status {
	case 304:

	default:
		return nil, nil, errors.Errorf("unknown response code")
	}

	return resp, httpResp, nil
}

// Setuser post /users/{id}
//
// Sets a user
func (c GoServer) Setuser(ctx context.Context, body *Primitives) (SetUserResponse, *http.Response, error) {
	urlStr := `/users/{id}`
	req := http.NewRequest(http.MethodPost, urlStr, nil)
	bodyBytes, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	req.Body = bytes.NewReader(bodyBytes)
	var queryStringValues url.Values

	if len(queryStringValues) > 0 {
		req.URL.RawQuery = queryStringValues.Encode()
	}

	httpResp, err := c.doRequest(req)
	if err != nil {
		return nil, nil, err
	}

	var resp SetUserResponse
	switch httpResp.Status {
	case 200:

		var bodyObject Setuser200WrappedResponse
		b, err := io.ReadAll(resp.Body)
		if err != nil {
			return nil, nil, err
		}
		if err = json.Unmarshal(b, &bodyObject); err != nil {
			return nil, nil, err
		}
		resp = bodyObject
	default:

		var bodyObject SetuserdefaultWrappedResponse
		b, err := io.ReadAll(resp.Body)
		if err != nil {
			return nil, nil, err
		}
		if err = json.Unmarshal(b, &bodyObject); err != nil {
			return nil, nil, err
		}
		resp = bodyObject
	}

	return resp, httpResp, nil
}

// AuthenticateResponse one-of enforcer
//
// Implementors:
// - HTTPStatusOk
type AuthenticateResponse interface {
	AuthenticateImpl()
}

// AuthenticateImpl implements AuthenticateResponse(200) for HTTPStatusOk
func (HTTPStatusOk) AuthenticateImpl() {}

// TestInlinePrimitiveBodyResponse one-of enforcer
//
// Implementors:
// - HTTPStatusOk
type TestInlinePrimitiveBodyResponse interface {
	TestInlinePrimitiveBodyImpl()
}

// TestInlinePrimitiveBodyImpl implements TestInlinePrimitiveBodyResponse(200) for HTTPStatusOk
func (HTTPStatusOk) TestInlinePrimitiveBodyImpl() {}

// TestInlineResponse one-of enforcer
//
// Implementors:
// -
// -
type TestInlineResponse interface {
	TestInlineImpl()
}

// TestInlineImpl implements TestInlineHeadersResponse(200) for
func (TestInline200Inline) TestInlineImpl() {}

// TestInlineImpl implements TestInlineHeadersResponse(201) for
func (TestInline201Inline) TestInlineImpl() {}

// GetUserResponse one-of enforcer
//
// Implementors:
// - HTTPStatusNotModified
type GetUserResponse interface {
	GetUserImpl()
}

// GetUserImpl implements GetUserResponse(304) for HTTPStatusNotModified
func (HTTPStatusNotModified) GetUserImpl() {}

// SetUserResponse one-of enforcer
//
// Implementors:
// - SetUser200HeadersResponse
// - #/components/schemas/Primitives
type SetUserResponse interface {
	SetUserImpl()
}

// SetUser200WrappedResponse wraps the normal body response with a
// struct to be able to additionally return headers or differentiate between
// multiple response codes with the same response body.
type SetUser200WrappedResponse struct {
	HeaderXResponseHeader omit.Val[string]
	Body                  Primitives
}

// SetUserImpl implements SetUserResponse(200) for SetUser200WrappedResponse
func (SetUser200WrappedResponse) SetUserImpl() {}

// SetUserdefaultWrappedResponse wraps the normal body response with a
// struct to be able to additionally return headers or differentiate between
// multiple response codes with the same response body.
type SetUserdefaultWrappedResponse struct {
	Body Primitives
}

// SetUserImpl implements SetUserResponse(default) for SetUserdefaultWrappedResponse
func (SetUserdefaultWrappedResponse) SetUserImpl() {}

// HTTPStatusNotModified is an empty response
type HTTPStatusNotModified struct{}

// HTTPStatusOk is an empty response
type HTTPStatusOk struct{}
